package server;

import android.app.NotificationManager;
import android.app.Service;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.location.LocationListener;
import android.os.Bundle;
import android.os.IBinder;
import android.os.Message;
import android.os.Messenger;
import android.os.RemoteException;
import android.widget.Toast;

import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.GooglePlayServicesClient;
import com.google.android.gms.common.GooglePlayServicesClient.ConnectionCallbacks;
import com.google.android.gms.common.GooglePlayServicesClient.OnConnectionFailedListener;
import com.google.android.gms.location.LocationClient;
import com.google.android.gms.location.LocationRequest;

public class Location extends Service implements 
		GooglePlayServicesClient.ConnectionCallbacks,
		GooglePlayServicesClient.OnConnectionFailedListener, com.google.android.gms.location.LocationListener {

	Intent intent;
	private Messenger serviceMessenger;

	private boolean mUpdatesRequested;
	private SharedPreferences mPrefs;
	private Editor mEditor;
	private LocationClient mLocationClient;
	// Milliseconds per second
	private static final int MILLISECONDS_PER_SECOND = 1000;
	// Update frequency in seconds
	public static final int UPDATE_INTERVAL_IN_SECONDS = 5;
	// Update frequency in milliseconds
	private static final long UPDATE_INTERVAL = MILLISECONDS_PER_SECOND
			* UPDATE_INTERVAL_IN_SECONDS;
	// The fastest update frequency, in seconds
	private static final int FASTEST_INTERVAL_IN_SECONDS = 1;
	// A fast frequency ceiling in milliseconds
	private static final long FASTEST_INTERVAL = MILLISECONDS_PER_SECOND
			* FASTEST_INTERVAL_IN_SECONDS;

	// Define an object that holds accuracy and frequency parameters
	LocationRequest mLocationRequest;

	@Override
	public IBinder onBind(Intent intent) {
		return null;
	}

	public void sendMessage(String string) {

		try {
			Bundle bundle = new Bundle();
			bundle.putString("message", string);

			Message message = new Message();
			message.setData(bundle);

			serviceMessenger.send(message);
		} catch (RemoteException e) {
			e.printStackTrace();
		}

	}

	@Override
	public int onStartCommand(Intent intent, int flags, int startId) {
		Bundle extras = intent.getExtras();
		serviceMessenger = (Messenger) extras.get("ActMessenger");
		sendMessage("Service Created");
		mLocationClient.connect();

		return Service.START_NOT_STICKY;
	}

	@Override
	public void onDestroy() {
		sendMessage("Service is destroyed");
		mLocationClient.disconnect();
	}

	@Override
	public void onCreate() {
		// mLocationClient = new LocationClient(Location.this, this, this);

		// Note that location updates are off until the user turns them on

        if (mUpdatesRequested) {
            mLocationClient.requestLocationUpdates(mLocationRequest, Location.this);
        }
		// Use high accuracy
		mLocationRequest = LocationRequest.create();
		mLocationRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);
		// Set the update interval to 5 seconds
		mLocationRequest.setInterval(UPDATE_INTERVAL);
		// Set the fastest update interval to 1 second
		mLocationRequest.setFastestInterval(FASTEST_INTERVAL);
		mLocationClient = new LocationClient(this, this, this);
	}

	@Override
	public void onConnectionFailed(ConnectionResult arg0) {
		Toast.makeText(Location.this, "Connection Failed", Toast.LENGTH_SHORT)
				.show();
	}

	@Override
	public void onConnected(Bundle arg0) {
		Toast.makeText(Location.this, "Just Connected", Toast.LENGTH_SHORT)
				.show();
		sendMessage("Location Client is connected");
		String locString = "Latitude :"
				+ mLocationClient.getLastLocation().getLatitude()
				+ "Longitude :"
				+ mLocationClient.getLastLocation().getLongitude();
		sendMessage(locString);

	}

	@Override
	public void onDisconnected() {

	}

	@Override
	public void onLocationChanged(android.location.Location location) {
		String locString = "Latitude :" + location.getLatitude()
				+ "Longitude :" + location.getLongitude();
		sendMessage(locString);
	}

}
