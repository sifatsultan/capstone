package server;

import android.app.NotificationManager;
import android.app.Service;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.location.LocationListener;
import android.os.Bundle;
import android.os.IBinder;
import android.os.Message;
import android.os.Messenger;
import android.os.RemoteException;
import android.widget.Toast;

import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.GooglePlayServicesClient;
import com.google.android.gms.common.GooglePlayServicesClient.ConnectionCallbacks;
import com.google.android.gms.common.GooglePlayServicesClient.OnConnectionFailedListener;
import com.google.android.gms.location.LocationClient;
import com.google.android.gms.location.LocationRequest;

public class Location extends Service implements LocationListener,
		GooglePlayServicesClient.ConnectionCallbacks,
		GooglePlayServicesClient.OnConnectionFailedListener {

	Intent intent;
	private Messenger serviceMessenger;
	private LocationRequest mLocationRequest;
	private boolean mUpdatesRequested;
	private SharedPreferences mPrefs;
	private Editor mEditor;
	private LocationClient mLocationClient;

	@Override
	public IBinder onBind(Intent intent) {
		return null;
	}

	public void sendMessage(String string) {

		try {
			Bundle bundle = new Bundle();
			bundle.putString("message", string);

			Message message = new Message();
			message.setData(bundle);

			serviceMessenger.send(message);
		} catch (RemoteException e) {
			e.printStackTrace();
		}

	}

	@Override
	public int onStartCommand(Intent intent, int flags, int startId) {
		Bundle extras = intent.getExtras();
		serviceMessenger = (Messenger) extras.get("ActMessenger");
		sendMessage("Service Created");
		mLocationClient.connect();

		return Service.START_NOT_STICKY;
	}

	@Override
	public void onDestroy() {
		sendMessage("Service is destroyed");
		mLocationClient.disconnect();
	}

	@Override
	public void onCreate() {
		// mLocationClient = new LocationClient(Location.this, this, this);
		mLocationRequest = LocationRequest.create();
		mLocationRequest
				.setInterval(LocationUtils.UPDATE_INTERVAL_IN_MILLISECONDS);
		mLocationRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);
		mLocationRequest
				.setFastestInterval(LocationUtils.FAST_INTERVAL_CEILING_IN_MILLISECONDS);
		// Note that location updates are off until the user turns them on

		mLocationClient = new LocationClient(Location.this,
				locationClientCallBacks, connectionFailedListener);
	}

	public ConnectionCallbacks locationClientCallBacks = new ConnectionCallbacks() {

		@Override
		public void onDisconnected() {
			sendMessage("Location Client is disconnected");
		}

		@Override
		public void onConnected(Bundle arg0) {
			Toast.makeText(Location.this, "Just Connected", Toast.LENGTH_SHORT)
					.show();
			sendMessage("Location Client is connected");
			String locString = "Latitude :"
					+ mLocationClient.getLastLocation().getLatitude()
					+ "Longitude :"
					+ mLocationClient.getLastLocation().getLongitude();
			sendMessage(locString);
			if (mUpdatesRequested) {
				mLocationClient.requestLocationUpdates(mLocationRequest, this);
			}
		}
	};

	public OnConnectionFailedListener connectionFailedListener = new OnConnectionFailedListener() {

		@Override
		public void onConnectionFailed(ConnectionResult arg0) {
			Toast.makeText(Location.this, "Connection Failed",
					Toast.LENGTH_SHORT).show();
		}
	};

}
